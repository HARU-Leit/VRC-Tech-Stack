---
/**
 * 現在のURLパスを取得し、末尾のスラッシュが存在する場合は削除します。
 * @returns {string} 現在のURLパス
 */
const getCurrentUrlPath = (): string => {
  return Astro.url.pathname.replace(/\/+$/, "");
};

// 現在のURLパスを取得
const currentUrlPath = getCurrentUrlPath();

/**
 * パスからパンくずリストの配列を生成します。
 * @param {string} path - URLパス
 * @returns {string[]} パンくずリストの配列
 */
const getBreadcrumbList = (path: string): string[] => {
  return path.split("/").slice(1);
};

// パンくずリストの配列を取得
const breadcrumbList = getBreadcrumbList(currentUrlPath);

// パンくずリストが Home > Posts > 1 <etc> の場合
// Postsを Posts (page number) に置き換える
if (breadcrumbList[0] === "posts") {
  breadcrumbList.splice(0, 2, `Posts (page ${breadcrumbList[1] || 1})`);
}

// パンくずリストが Home > Tags > [tag] > [page] <etc> の場合
// [tag] > [page] を [tag] (page number) に置き換える
if (breadcrumbList[0] === "tags" && !isNaN(Number(breadcrumbList[2]))) {
  breadcrumbList.splice(
    1,
    3,
    `${breadcrumbList[1]} ${
      Number(breadcrumbList[2]) === 1 ? "" : "(page " + breadcrumbList[2] + ")"
    }`
  );
}
---

<nav class="breadcrumb" aria-label="breadcrumb">
  <ul>
    <li>
      <a href="/">ホーム</a>
      <span aria-hidden="true">&raquo;</span>
    </li>
    {
      // パンくずリストをループして表示
      breadcrumbList.map((breadcrumb, index) =>
        index + 1 === breadcrumbList.length ? (
          <li>
            <span
              class={`${index > 0 ? "lowercase" : "capitalize"}`}
              aria-current="page"
            >
              {/* Home > Tags > some-tag の最後の部分を小文字にする */}
              {decodeURIComponent(breadcrumb)}
            </span>
          </li>
        ) : (
          <li>
            <a href={`/${breadcrumb}/`}>{breadcrumb}</a>
            <span aria-hidden="true">&raquo;</span>
          </li>
        )
      )
    }
  </ul>
</nav>

<style>
  .breadcrumb {
    @apply mx-auto mb-1 mt-8 w-full max-w-3xl px-4;
  }
  .breadcrumb ul li {
    @apply inline;
  }
  .breadcrumb ul li a {
    @apply capitalize opacity-70;
  }
  .breadcrumb ul li span {
    @apply opacity-70;
  }
  .breadcrumb ul li:not(:last-child) a {
    @apply hover:opacity-100;
  }
</style>
